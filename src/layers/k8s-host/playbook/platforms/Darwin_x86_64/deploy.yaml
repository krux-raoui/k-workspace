# check docker-machine presence
- name: check if docker-machine already exists
  command:
    argv:
      - docker-machine
      - ls
      - --filter
      - NAME={{ env_name }}
      - -f
      - "."
  changed_when: no
  register: docker_machine_exists
  environment:
    HOME: "{{ datas_host.root_path }}"

# create docker-machine instance
- name: create docker-machine instance
  command:
    argv:
      - docker-machine
      - create
      - --engine-label
      - k-ws-env="{{ env_name }}"
      - --driver
      - virtualbox
      - --virtualbox-cpu-count
      - "{{ k8s_host.cpu_count }}"
      - --virtualbox-disk-size
      - "{{ k8s_host.disk_size }}"
      - --virtualbox-hostonly-cidr
      - "{{ k8s_host.network_cidr }}"
      - --virtualbox-memory
      - "{{ k8s_host.memory }}"
      - --virtualbox-boot2docker-url
      - "{{ k8s_host.boot2docker_iso_url }}"
      - "{{ env_name }}"
  when: "'.' not in  docker_machine_exists.stdout"
  environment:
    HOME: "{{ datas_host.root_path }}"

# get docker_host env variable
# FIXME: rewrite in pure-ansible
- name: extracting docker-machine env vars
  shell: "sh ./scripts/extract-docker-machine-vars.sh {{ env_name }}"
  register: docker_machine_env_exports
  changed_when: no
  environment:
    HOME: "{{ datas_host.root_path }}"
- name: setting variables in task context
  set_fact:
    key_value: "true" # warning disable in vscode ( not needed for real)
    docker_machine_env: "{{ docker_machine_env_exports.stdout | from_json }}"



# Setup kubernetes cluster
- name: check for cluster kind
  command:
    cmd: kind get clusters
  changed_when: false
  register: clusters_list
  environment:
    HOME: "{{ datas_host.root_path }}"
    DOCKER_CERT_PATH: "{{ docker_machine_env.DOCKER_CERT_PATH }}"
    DOCKER_HOST: "{{ docker_machine_env.DOCKER_HOST }}"
    DOCKER_MACHINE_NAME: "{{ docker_machine_env.DOCKER_MACHINE_NAME }}"
    DOCKER_TLS_VERIFY: "{{ docker_machine_env.DOCKER_TLS_VERIFY }}"

#create datas shared folder
- name: create cluster data shared directory
  file:
    state: directory
    recurse: yes
    path: "{{ k8s_host.shared_folder }}"
    access_time: now

#Creating KIND cluster
- name: prepare kind cluster config
  template:
    src: ./templates/kind-cluster.tpl.yaml
    dest: ./templates/kind-cluster.yaml
  when: "'No kind clusters found' in clusters_list.stderr"

- name: create kind cluster
  command:
    argv:
      - kind
      - create
      - cluster
      - --name
      - "{{ env_name }}"
      - --config
      - ./templates/kind-cluster.yaml
  when: "'No kind clusters found' in clusters_list.stderr"
  environment:
    HOME: "{{ datas_host.root_path }}"
    DOCKER_CERT_PATH: "{{ docker_machine_env.DOCKER_CERT_PATH }}"
    DOCKER_HOST: "{{ docker_machine_env.DOCKER_HOST }}"
    DOCKER_MACHINE_NAME: "{{ docker_machine_env.DOCKER_MACHINE_NAME }}"
    DOCKER_TLS_VERIFY: "{{ docker_machine_env.DOCKER_TLS_VERIFY }}"

- name: deleting kind-config template result
  file:
    path: ./templates/kind-cluster.yaml
    state: absent
  when: "'No kind clusters found' in clusters_list.stderr"

# Setup local kubeconfig
- name: setup kind kubeconfig
  command:
    cmd: kind export kubeconfig --name {{ env_name }}
  changed_when: false
  environment:
    HOME: "{{ datas_host.root_path }}"
    DOCKER_CERT_PATH: "{{ docker_machine_env.DOCKER_CERT_PATH }}"
    DOCKER_HOST: "{{ docker_machine_env.DOCKER_HOST }}"
    DOCKER_MACHINE_NAME: "{{ docker_machine_env.DOCKER_MACHINE_NAME }}"
    DOCKER_TLS_VERIFY: "{{ docker_machine_env.DOCKER_TLS_VERIFY }}"
