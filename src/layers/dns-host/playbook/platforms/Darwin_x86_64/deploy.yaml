# get docker_host env variable
# FIXME: rewrite in pure-ansible
- name: extracting docker-machine env vars
  shell: "sh ./scripts/extract-docker-machine-vars.sh {{ env_name }}"
  register: docker_machine_env_exports
  changed_when: no
  environment:
    HOME: "{{ datas_host.root_path }}"
- name: setting variables in task context
  set_fact:
    key_value: "true" # warning disable in vscode ( not needed for real)
    docker_machine_env: "{{ docker_machine_env_exports.stdout | from_json }}"

# Ensure connection
- name: "ensure docker cli default connection"
  shell: "docker context inspect default"
  environment:
    HOME: "{{ datas_host.root_path }}"
    DOCKER_CERT_PATH: "{{ docker_machine_env.DOCKER_CERT_PATH }}"
    DOCKER_HOST: "{{ docker_machine_env.DOCKER_HOST }}"
    DOCKER_MACHINE_NAME: "{{ docker_machine_env.DOCKER_MACHINE_NAME }}"
    DOCKER_TLS_VERIFY: "{{ docker_machine_env.DOCKER_TLS_VERIFY }}"
  register: docker_context_inpect
  changed_when: no

- name: get brew root path
  shell: "brew --prefix"
  register: "brew_prefix"

- name: write dnsmasq domain file
  blockinfile:
    path: "{{ brew_prefix.stdout }}/etc/dnsmasq.d/{{ dns_host.tld }}.conf"
    block: |
      address=/.{{ dns_host.tld }}/{{ docker_machine_env.DOCKER_HOST_IP }}
    marker: "# {mark} {{ env_name }} ANSIBLE MANAGED BLOCK"

- name: restart dnsmasq
  become: yes
  shell: "brew services restart dnsmasq"

- name: reset dns cache
  become: yes
  shell: "killall -HUP mDNSResponder"
