
- name: check if docker-machine {{ docker_machine_name }} exists
  shell: docker-machine ls \
    --filter NAME={{ docker_machine_name }} \
    -f "."
  changed_when: no
  register: docker_machine_exists
  failed_when: no
  environment:
    HOME: "{{ datas_host.root_path }}"

- name: extracting docker-machine env vars
  shell: "sh ./roles/common/files/extract-docker-machine-vars.sh {{ docker_machine_name }}"
  register: docker_machine_env_exports
  changed_when: no
  environment:
    HOME: "{{ home_path }}"
  when:
    - docker_machine_exists.stdout is defined
    - "'.' in  docker_machine_exists.stdout"
- name: setting variables in task context
  set_fact:
    key_value: "true" # warning disable in vscode ( not needed for real)
    docker_machine_env: "{{ docker_machine_env_exports.stdout | from_json }}"

- name: check if container {{ container.name }} exists
  shell: "docker container ls -a -f Name={{ container.name }}"
  register: container_exists
  changed_when: no
  environment:
    HOME: "{{ home_path }}"
    DOCKER_CERT_PATH: "{{ docker_machine_env.DOCKER_CERT_PATH }}"
    DOCKER_HOST: "{{ docker_machine_env.DOCKER_HOST }}"
    DOCKER_MACHINE_NAME: "{{ docker_machine_env.DOCKER_MACHINE_NAME }}"
    DOCKER_TLS_VERIFY: "{{ docker_machine_env.DOCKER_TLS_VERIFY }}"
  when:
    - docker_machine_exists.stdout is defined
    - "'.' in  docker_machine_exists.stdout"

- name: check if registry {{ container.name }} running
  shell: "docker container ls -f Name={{ container.name }}"
  register: container_started
  changed_when: no
  environment:
    HOME: "{{ datas_host.root_path }}"
    DOCKER_CERT_PATH: "{{ docker_machine_env.DOCKER_CERT_PATH }}"
    DOCKER_HOST: "{{ docker_machine_env.DOCKER_HOST }}"
    DOCKER_MACHINE_NAME: "{{ docker_machine_env.DOCKER_MACHINE_NAME }}"
    DOCKER_TLS_VERIFY: "{{ docker_machine_env.DOCKER_TLS_VERIFY }}"
  when:
    - docker_machine_exists.stdout is defined
    - "'.' in  docker_machine_exists.stdout"
    - "'{{ container.name }}' in container_exists.stdout"
- name: stop {{ container.name }} container
  shell: docker container stop "{{ container.name }}"
  environment:
    HOME: "{{ datas_host.root_path }}"
    DOCKER_CERT_PATH: "{{ docker_machine_env.DOCKER_CERT_PATH }}"
    DOCKER_HOST: "{{ docker_machine_env.DOCKER_HOST }}"
    DOCKER_MACHINE_NAME: "{{ docker_machine_env.DOCKER_MACHINE_NAME }}"
    DOCKER_TLS_VERIFY: "{{ docker_machine_env.DOCKER_TLS_VERIFY }}"
  when:
    - docker_machine_exists.stdout is defined
    - "'.' in  docker_machine_exists.stdout"
    - "'{{ container.name }}' in container_started.stdout"

- name: remove {{ container.name }} container
  shell: docker container rm "{{ container.name }}"
  environment:
    HOME: "{{ datas_host.root_path }}"
    DOCKER_CERT_PATH: "{{ docker_machine_env.DOCKER_CERT_PATH }}"
    DOCKER_HOST: "{{ docker_machine_env.DOCKER_HOST }}"
    DOCKER_MACHINE_NAME: "{{ docker_machine_env.DOCKER_MACHINE_NAME }}"
    DOCKER_TLS_VERIFY: "{{ docker_machine_env.DOCKER_TLS_VERIFY }}"
  when:
    - docker_machine_exists.stdout is defined
    - "'.' in  docker_machine_exists.stdout"
    - "'{{ container.name }}' in container_exists.stdout"
